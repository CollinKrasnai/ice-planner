<!DOCTYPE html>
<html lang="en" class="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ice Cost Planner</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom styles for better form appearance */
        /* Hides the number input arrows in Chrome, Safari, Edge, Opera */
        input::-webkit-outer-spin-button,
        input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        /* Hides the number input arrows in Firefox */
        input[type=number] {
            -moz-appearance: textfield;
        }
    </style>
    <script>
        // Configure Tailwind CSS for dark mode
        tailwind.config = {
            darkMode: 'class',
        }
    </script>
</head>
<body class="bg-slate-100 dark:bg-slate-900 text-slate-800 dark:text-slate-200 font-sans flex items-center justify-center min-h-screen p-4 transition-colors duration-300">

    <ice-planner></ice-planner>

    <script type="module">
        // --- Reusable Number Input Web Component ---
        // I'm making a template here for our number input.
        // It's like a blueprint for the element.
        var numberInputTemplate = document.createElement('template');
        numberInputTemplate.innerHTML = `
            <div class="flex flex-col space-y-1 w-full">
                <label for="input" class="text-sm font-medium text-slate-600 dark:text-slate-400"></label>
                <div class="relative">
                    <span class="absolute inset-y-0 left-0 flex items-center pl-3 text-slate-500"></span>
                    <input 
                        type="number" 
                        id="input" 
                        class="w-full pl-7 pr-3 py-2 bg-white dark:bg-slate-800 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-sky-500 focus:border-sky-500 transition"
                        placeholder="0"
                        step="any"
                    >
                </div>
            </div>
        `;

        // This is the class for our custom number input element.
        // It's basically the logic behind the <number-input> tag.
        class NumberInput extends HTMLElement {
            constructor() {
                super();
                this.attachShadow({ mode: 'open' });
                this.shadowRoot.appendChild(numberInputTemplate.content.cloneNode(true));
            }

            // This runs when the element gets added to the page.
            connectedCallback() {
                var labelEl = this.shadowRoot.querySelector('label');
                var inputEl = this.shadowRoot.querySelector('input');
                var currencySpan = this.shadowRoot.querySelector('span');

                labelEl.textContent = this.getAttribute('label-text');
                inputEl.name = this.getAttribute('name');
                inputEl.id = this.getAttribute('name');
                inputEl.placeholder = this.getAttribute('placeholder') || '0';
                
                // Check if it's a currency input to show a '$'
                if (this.hasAttribute('currency')) {
                    currencySpan.textContent = '$';
                } else if (this.getAttribute('name') === 'feePercentage') { // Specific for percentage
                    currencySpan.textContent = '#'; // Use # for percentage input, as the % is outside
                } else {
                    currencySpan.textContent = '#';
                }

                // *** FIX: Properly forward 'input' and 'change' events ***
                // This lets the main <ice-planner> component know when a value has been typed or committed.
                // 'composed: true' allows the event to bubble out of the Shadow DOM.
                inputEl.addEventListener('input', (e) => {
                    this.dispatchEvent(new Event('input', { bubbles: true, composed: true }));
                });
                
                inputEl.addEventListener('change', (e) => {
                    this.dispatchEvent(new Event('change', { bubbles: true, composed: true }));
                });
            }

            // These are helper methods to get and set the value of the input.
            get value() {
                return this.shadowRoot.querySelector('input').value;
            }

            set value(val) {
                this.shadowRoot.querySelector('input').value = val;
            }
        }
        // This line officially defines the <number-input> tag.
        customElements.define('number-input', NumberInput);


        // --- Main Ice Planner Application Web Component ---
        // Now for the main app component blueprint.
        var icePlannerTemplate = document.createElement('template');
        icePlannerTemplate.innerHTML = `
            <div class="w-full max-w-4xl mx-auto bg-white dark:bg-slate-800 shadow-2xl rounded-2xl p-6 md:p-8">
                <header class="flex justify-between items-center mb-6">
                    <div class="flex items-center space-x-3">
                         <svg class="w-10 h-10 text-sky-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                             <path stroke-linecap="round" stroke-linejoin="round" d="M11.25 4.5l7.5 7.5-7.5 7.5m-6-15l7.5 7.5-7.5 7.5" />
                         </svg>
                        <h1 class="text-2xl md:text-3xl font-bold text-slate-800 dark:text-slate-100">Ice Planner</h1>
                    </div>
                    <button id="theme-toggle" class="p-2 rounded-full hover:bg-slate-200 dark:hover:bg-slate-700 transition">
                        <svg id="sun-icon" class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.95-4.243l-1.59-1.59M3 12h2.25m.386-6.364l1.59 1.59" /></svg>
                        <svg id="moon-icon" class="w-6 h-6 hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z" /></svg>
                    </button>
                </header>

                <form id="cost-form" class="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-6">
                    
                    <div class="space-y-6">
                        <fieldset class="p-4 border dark:border-slate-600 rounded-lg">
                            <legend class="px-2 font-semibold text-sky-600 dark:text-sky-400">Team Info</legend>
                            <div class="flex flex-col space-y-2">
                                <label for="teamName" class="text-sm font-medium text-slate-600 dark:text-slate-400">Team Name</label>
                                <input type="text" id="teamName" name="teamName" class="w-full px-3 py-2 bg-white dark:bg-slate-800 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-sky-500 focus:border-sky-500 transition" placeholder="e.g., The Mighty Pucks">
                            </div>
                        </fieldset>

                        <fieldset class="p-4 border dark:border-slate-600 rounded-lg">
                            <legend class="px-2 font-semibold text-sky-600 dark:text-sky-400">Ice Time</legend>
                            <div class="flex flex-col sm:flex-row items-center space-y-4 sm:space-y-0 sm:space-x-4">
                                <number-input name="iceHours" label-text="Hours"></number-input>
                                <span class="text-slate-500 font-bold text-xl mt-6">Ã—</span>
                                <number-input name="iceCostPerHour" label-text="Cost per Hour" currency></number-input>
                            </div>
                        </fieldset>

                        <fieldset class="p-4 border dark:border-slate-600 rounded-lg">
                            <legend class="px-2 font-semibold text-sky-600 dark:text-sky-400">Additional Costs</legend>
                            <div class="space-y-4">
                                <number-input name="coachCost" label-text="Coach Cost" currency></number-input>
                                <number-input name="jerseyCost" label-text="Jersey Cost" currency></number-input>
                                <number-input name="numPlayers" label-text="Number of Players"></number-input>
                            </div>
                        </fieldset>
                        
                         <fieldset class="p-4 border dark:border-slate-600 rounded-lg">
                            <legend class="px-2 font-semibold text-sky-600 dark:text-sky-400">Transaction Fees</legend>
                            <div class="flex flex-col sm:flex-row items-center space-y-4 sm:space-y-0 sm:space-x-4">
                                <div class="relative w-full">
                                    <number-input name="feePercentage" label-text="Percentage Fee"></number-input>
                                    <span class="absolute right-3 bottom-2.5 text-slate-500">%</span>
                                </div>
                                <span class="text-slate-500 font-bold text-xl mt-6">+</span>
                                <number-input name="feeFixed" label-text="Fixed Fee" currency></number-input>
                            </div>
                        </fieldset>
                    </div>

                    <div class="space-y-6">
                        <div class="bg-slate-100 dark:bg-slate-900/50 p-6 rounded-lg space-y-4">
                            <h2 class="text-xl font-semibold border-b border-slate-300 dark:border-slate-600 pb-2">Results</h2>
                            <div class="flex justify-between items-center">
                                <span class="font-medium">Total Team Cost</span>
                                <span id="totalTeamCost" class="text-2xl font-bold text-green-600 dark:text-green-400">$0.00</span>
                            </div>
                            <div class="flex justify-between items-center">
                                <span class="font-medium">Cost per Player</span>
                                <span id="costPerPlayer" class="text-2xl font-bold text-sky-600 dark:text-sky-400">$0.00</span>
                            </div>
                        </div>

                        <div class="space-y-2">
                            <label for="shareUrl" class="text-sm font-medium">Share Results (URL)</label>
                            <div class="relative">
                                <input type="text" id="shareUrl" readonly class="w-full text-sm bg-slate-100 dark:bg-slate-700 border-slate-300 dark:border-slate-600 rounded-md py-2 px-3 focus:outline-none cursor-pointer">
                                <button type="button" id="copyUrlBtn" class="absolute inset-y-0 right-0 flex items-center px-3 text-slate-500 hover:text-sky-500">
                                    <svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.03 1.125 0 1.131.094 1.976 1.057 1.976 2.192V7.5m-9 7.5h12.75a2.25 2.25 0 002.25-2.25v-6a2.25 2.25 0 00-2.25-2.25H6.75a2.25 2.25 0 00-2.25 2.25v6a2.25 2.25 0 002.25 2.25z" /></svg>
                                </button>
                                <span id="copy-feedback" class="absolute -bottom-6 right-0 text-xs text-green-600 dark:text-green-400 opacity-0 transition-opacity">Copied!</span>
                            </div>
                        </div>

                         <div class="flex items-center justify-end space-x-4 pt-4">
                            <button type="button" id="reset-button" class="px-4 py-2 text-sm font-semibold text-white bg-red-600 hover:bg-red-700 rounded-md shadow-sm transition">Reset Form</button>
                         </div>
                    </div>

                </form>
            </div>
        `;

        class IcePlanner extends HTMLElement {
            constructor() {
                super();
                this.attachShadow({ mode: 'open' });
                this.shadowRoot.appendChild(icePlannerTemplate.content.cloneNode(true));
            }

            // This function runs when the <ice-planner> tag is ready on the page.
            connectedCallback() {
                var self = this; // 'this' can be tricky, so storing it in 'self' is a common old-school trick.

                // Grab all the HTML elements we need to work with.
                this.form = this.shadowRoot.querySelector('#cost-form');
                this.allInputs = this.shadowRoot.querySelectorAll('input, number-input');
                this.totalTeamCostEl = this.shadowRoot.querySelector('#totalTeamCost');
                this.costPerPlayerEl = this.shadowRoot.querySelector('#costPerPlayer');
                this.shareUrlEl = this.shadowRoot.querySelector('#shareUrl');
                this.copyUrlBtn = this.shadowRoot.querySelector('#copyUrlBtn');
                this.resetButton = this.shadowRoot.querySelector('#reset-button');
                this.themeToggle = this.shadowRoot.querySelector('#theme-toggle');
                
                // Set up listeners for when things happen.
                // Using a loop to add a listener to every input box.
                this.allInputs.forEach(function(input) {
                    input.addEventListener('input', function() { self.calculate(); });
                    input.addEventListener('change', function() { self.calculate(); });
                });
                
                this.copyUrlBtn.addEventListener('click', function() { self.copyURL(); });
                this.shareUrlEl.addEventListener('click', function() { self.copyURL(); });
                this.resetButton.addEventListener('click', function() { self.resetState(); });
                this.themeToggle.addEventListener('click', function() { self.toggleTheme(); });
                
                // Load any saved data when the page first loads.
                this.loadState();
                this.loadTheme();
            }

            // This function does all the math.
            calculate() {
                var values = {};
                // Go through each input and get its current value.
                this.allInputs.forEach(function(input) {
                    // *** FIX: Use getAttribute('name') to read the name attribute ***
                    // *** from both native <input> and custom <number-input> elements. ***
                    // *** 'input.name' only works for native form elements. ***
                    const name = input.getAttribute('name');
                    if (name) {
                        values[name] = input.value || 0;
                    }
                });
                
                // I'm using parseFloat to turn the text from the input boxes into real numbers.
                // The '|| 0' part just makes it 0 if the box is empty.
                var iceHours = parseFloat(values.iceHours) || 0;
                var iceCostPerHour = parseFloat(values.iceCostPerHour) || 0;
                var coachCost = parseFloat(values.coachCost) || 0;
                var jerseyCost = parseFloat(values.jerseyCost) || 0;
                var feePercentage = parseFloat(values.feePercentage) || 0;
                var feeFixed = parseFloat(values.feeFixed) || 0;
                var numPlayers = parseFloat(values.numPlayers) || 0;

                // The actual calculation logic.
                var iceCost = iceHours * iceCostPerHour;
                var subTotal = iceCost + coachCost + jerseyCost;
                var percentageFeeAmount = subTotal * (feePercentage / 100);
                var totalCost = subTotal + percentageFeeAmount + feeFixed;
                
                var costPerPlayer = 0;
                if (numPlayers > 0) {
                    costPerPlayer = totalCost / numPlayers;
                }

                // Update the results on the screen.
                this.totalTeamCostEl.textContent = this.formatCurrency(totalCost);
                this.costPerPlayerEl.textContent = this.formatCurrency(costPerPlayer);

                // Save the new values and update the share URL.
                this.saveState();
                this.generateShareURL();
            }

            // Saves all the current input values to the browser's local storage.
            saveState() {
                var state = {};
                this.allInputs.forEach(function(input) {
                    // *** FIX: Use getAttribute('name') here as well. ***
                    const name = input.getAttribute('name');
                    if (name) {
                        state[name] = input.value;
                    }
                });
                localStorage.setItem('icePlannerState', JSON.stringify(state));
            }

            // Loads data from local storage or from the URL.
            loadState() {
                var urlParams = new URLSearchParams(window.location.search);
                var state;

                if (urlParams.has('teamName')) {
                    // If there's data in the URL, use that.
                    state = Object.fromEntries(urlParams.entries());
                } else {
                    // Otherwise, check if we saved anything last time.
                    var savedState = localStorage.getItem('icePlannerState');
                    state = savedState ? JSON.parse(savedState) : {};
                }
                
                if (state) {
                    this.allInputs.forEach(function(input) {
                        // *** FIX: Use getAttribute('name') here too. ***
                        const name = input.getAttribute('name');
                        if (name && state[name]) {
                            input.value = state[name];
                        }
                    });
                }
                // Run the calculation once at the start to show the results.
                this.calculate();
            }

            // Clears the form and any saved data.
            resetState() {
                // this.form.reset() doesn't work well with custom elements.
                // Manually clear all inputs.
                this.allInputs.forEach(function(input) { input.value = ''; });
                
                localStorage.removeItem('icePlannerState');
                // Clear the URL query string
                window.history.pushState({}, '', window.location.pathname);
                this.calculate();
            }

            // Creates the URL that people can use to share their calculations.
            generateShareURL() {
                var params = new URLSearchParams();
                this.allInputs.forEach(function(input) {
                    // *** FIX: Use getAttribute('name') for the final time. ***
                    const name = input.getAttribute('name');
                    if(name && input.value) {
                        params.set(name, input.value);
                    }
                });
                var shareableURL = window.location.origin + window.location.pathname + '?' + params.toString();
                this.shareUrlEl.value = shareableURL;
            }
            
            // Copies the share URL to the clipboard.
            async copyURL() { // *** FIX: Made async and using modern clipboard API ***
                const urlToCopy = this.shareUrlEl.value;
                if (!urlToCopy) return;

                try {
                    await navigator.clipboard.writeText(urlToCopy);
                    
                    // Show feedback
                    var feedback = this.shadowRoot.querySelector('#copy-feedback');
                    feedback.textContent = 'Copied!';
                    feedback.style.opacity = '1';
                    setTimeout(function() {
                        feedback.style.opacity = '0';
                    }, 2000);

                } catch (err) {
                    console.error('Failed to copy URL: ', err);
                    // Show error feedback
                    var feedback = this.shadowRoot.querySelector('#copy-feedback');
                    feedback.textContent = 'Failed!';
                    feedback.style.opacity = '1';
                    setTimeout(function() {
                        feedback.style.opacity = '0';
                    }, 2000);
                }
            }
            
            // Toggles between light and dark mode.
            toggleTheme() {
                document.documentElement.classList.toggle('dark');
                var isDark = document.documentElement.classList.contains('dark');
                localStorage.setItem('theme', isDark ? 'dark' : 'light');
                this.shadowRoot.querySelector('#sun-icon').classList.toggle('hidden', isDark);
                this.shadowRoot.querySelector('#moon-icon').classList.toggle('hidden', !isDark);
            }
            
            // Checks for a saved theme when the page loads.
            loadTheme() {
                var savedTheme = localStorage.getItem('theme');
                var prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;

                if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
                    document.documentElement.classList.add('dark');
                    this.shadowRoot.querySelector('#sun-icon').classList.add('hidden');
                    this.shadowRoot.querySelector('#moon-icon').classList.remove('hidden');
                } else {
                    document.documentElement.classList.remove('dark');
                    this.shadowRoot.querySelector('#sun-icon').classList.remove('hidden');
                    this.shadowRoot.querySelector('#moon-icon').classList.add('hidden');
                }
            }
            
            // A handy function to make numbers look like money (e.g., $1,234.56).
            formatCurrency(amount) {
                return new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD'
                }).format(amount);
            }
        }
        customElements.define('ice-planner', IcePlanner);

    </script>
</body>
</html>
